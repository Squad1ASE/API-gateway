openapi: 3.0.1
info:
  title: Booking Service API
  description: Reservation and Seat from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  
  /reservations: 
    get:
      tags:
        - All reservations
      summary: Get all the reservations
      operationId: views.reservation.get_all_reservation
      responses:
        200:
          description: Return all reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'

  /reservations/{reservation_id}:
    get:
      tags:
        - One specific reservation
      summary: Get the reservation with this ID
      parameters:
        - in: path
          name: reservation_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the reservation
      operationId: views.reservation.get_reservation
      responses:
        200:
          description: Return the reservation with this ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'
        404:
          description: There is not a reservation with this ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    #post:
    #  tags:
    #    - Edit this reservation
    #  summary: Edit this reservation

    #delete:
    #  tags:
    #    - Delete this reservation
    #  summary: Delete this reservation

  /reservations/{reservation_id}/seats:
    get:
      tags:
        - All seat for this reservation 
      summary: Get all the seat for this reservation
      parameters:
        - in: path
          name: reservation_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the reservation
      operationId: views.reservation.get_seats
      responses:
        200:
          description: Return all seats for this reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    type: array
                    items:
                      $ref: '#/components/schemas/Seat'   
        404:
          description: There is not a reservation with this ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'     

  /reservations/restaurants/{restaurant_id}:
    get:
      tags:
        - All reservations for this restaurant
      summary: Get all reservations for this restaurant
      parameters:
        - in: path
          name: restaurant_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the restaurant
      operationId: views.reservation.get_restaurant_reservations
      responses:
        200:
          description: Return all reservations for this restaurant
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'
    #put:
    #  tags:
    #    - Create a reservation for this restaurant
    #  summary: Create a reservation for this restaurant

    #delete:
    #  tags:
    #    - Delete all reservations for this restaurant
    #  summary: Delete all reservations for this restaurant  


  /reservations/users/{user_id}: 
    get:
      tags:
        - All reservations for this user
      summary: Get all the reservations for this user  
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user
      operationId: views.reservation.get_user_reservations
      responses:
        200:
          description: Return all personal reservations of a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Reservation'
                        - $ref: '#/components/schemas/Seat'
                        - $ref: '#/components/schemas/ReservationSeat'

    put:
      tags:
        - Create a reservation for this user
      summary: Create a reservation for this user
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user
      operationId: views.reservation.create_reservation
      responses:
        200:
          description: The reservation is created
          content: {}
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    
    #delete:
    #  tags:
    #    - Delete all the reservations made by the user
    #  summary: Delete all the reservations made by this user
 

  /reservations/{reservation_id}/entrances:
    
    post:
      tags:
        - Confirm the entrances for this reservation
      summary: Confirm the entrances for this reservation
      parameters:
        - in: path
          name: reservation_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the reservation
      operationId: views.reservation.confirm_participants
      responses:
        200:
          description: The entrances id confirmed
          content: {}
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   



components:
  schemas:
    Error:
      required:
      - message
      properties:
        message:
          type: string
          example: You are not allowed to this feature

    Reservation:
      required:
      - booker_id
      - restaurant_id
      - table_id
      - seats
      - places
      - date
      - cancelled
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        booker_id:
          minimum: 1
          type: integer
          readOnly: true
          example: 123
        restaurant_id:
          minimum: 1
          type: integer
          readOnly: true
          example: 123
        seats:
          type: Seat
          readOnly: false
          $ref: '#/components/schemas/Seat'
        places:
          minimum: 1
          type: integer
          readOnly: false
          example: 123
        table_id:
          minimum: 1
          type: integer
          readOnly: true
          example: 123
        date:
          type: date
          readOnly: true
          example: "12/10/2020 12:00"
        cancelled:
          type: boolean
          readOnly: false
          example: false

    Seat:
      required:
      - reservation_id
      - guests_email
      - confirmed
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        reservation_id:
          minimum: 1
          type: integer
          readOnly: true
          example: 123
        guests_email:
          type: string
          readOnly: true
          example: guest@email.com
        confirmed:
          type: boolean
          readOnly: false
          example: false          

    ReservationSeat:
      required:
      - booker_id
      - restaurant_id
      - table_id
      - date
      - cancelled
      - reservation_id
      - guests_email
      - confirmed
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        booker_id:
          type: integer
          readOnly: true
          example: 123
        restaurant_id:
          type: integer
          readOnly: true
          example: 123
        table_id:
          type: integer
          readOnly: true
          example: 123
        date:
          type: date
          readOnly: true
          example: "12/10/2020 12:00"
        cancelled:
          type: boolean
          readOnly: false
          example: false
        reservation_id:
          type: integer
          readOnly: true
          example: 123
        guests_email:
          type: string
          readOnly: true
          example: guest@email.com
        confirmed:
          type: boolean
          readOnly: false
          example: false          

       
  